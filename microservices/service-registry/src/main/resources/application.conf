# Service Registry Configuration

# Server settings
server {
    port = ${?SERVER_PORT}
    host = ${?SERVER_HOST}
    development = false
    development = ${?DEVELOPMENT_MODE}
}

# Authentication
auth {
    enabled = true
    enabled = ${?AUTH_ENABLED}
    issuer = "service-registry"
    issuer = ${?AUTH_ISSUER}
    audience = "service-registry-clients"
    audience = ${?AUTH_AUDIENCE}
    realm = "Service Registry"
    realm = ${?AUTH_REALM}
    secret = ${?AUTH_SECRET}
    expiration = 3600  # 1 hour
    expiration = ${?AUTH_EXPIRATION}
}

# Storage
storage {
    type = "redis"  # redis, memory, file
    type = ${?STORAGE_TYPE}
    redis {
        host = "localhost"
        host = ${?REDIS_HOST}
        port = 6379
        port = ${?REDIS_PORT}
        database = 0
        database = ${?REDIS_DATABASE}
        password = ${?REDIS_PASSWORD}
    }
    file {
        path = "data"
        path = ${?STORAGE_PATH}
    }
    cache {
        enabled = true
        enabled = ${?CACHE_ENABLED}
        ttl = 60000  # 1 minute
        ttl = ${?CACHE_TTL}
        maxSize = 10000
        maxSize = ${?CACHE_MAX_SIZE}
    }
}

# Messaging
messaging {
    type = "kafka"  # kafka, rabbitmq, memory
    type = ${?MESSAGING_TYPE}
    kafka {
        bootstrap.servers = "localhost:9092"
        bootstrap.servers = ${?KAFKA_BOOTSTRAP_SERVERS}
        group.id = "service-registry"
        group.id = ${?KAFKA_GROUP_ID}
        auto.offset.reset = "earliest"
    }
    rabbitmq {
        host = "localhost"
        host = ${?RABBITMQ_HOST}
        port = 5672
        port = ${?RABBITMQ_PORT}
        username = ${?RABBITMQ_USERNAME}
        password = ${?RABBITMQ_PASSWORD}
        virtualHost = "/"
        virtualHost = ${?RABBITMQ_VHOST}
    }
}

# Monitoring
monitoring {
    enabled = true
    enabled = ${?MONITORING_ENABLED}
    metrics {
        enabled = true
        enabled = ${?METRICS_ENABLED}
        endpoint = "/metrics"
        endpoint = ${?METRICS_ENDPOINT}
        interval = 15000  # 15 seconds
        interval = ${?METRICS_INTERVAL}
    }
    health {
        enabled = true
        enabled = ${?HEALTH_ENABLED}
        endpoint = "/health"
        endpoint = ${?HEALTH_ENDPOINT}
        interval = 30000  # 30 seconds
        interval = ${?HEALTH_CHECK_INTERVAL}
    }
    tracing {
        enabled = false
        enabled = ${?TRACING_ENABLED}
        sampler = 1.0
        sampler = ${?TRACING_SAMPLER}
    }
}

# Service settings
service {
    name = "service-registry"
    name = ${?SERVICE_NAME}
    version = "1.0.0"
    version = ${?SERVICE_VERSION}
    validation {
        enabled = true
        enabled = ${?VALIDATION_ENABLED}
        strict = true
        strict = ${?VALIDATION_STRICT}
        maxNameLength = 100
        maxNameLength = ${?VALIDATION_MAX_NAME_LENGTH}
        maxInstancesPerService = 100
        maxInstancesPerService = ${?VALIDATION_MAX_INSTANCES}
    }
    events {
        enabled = true
        enabled = ${?EVENTS_ENABLED}
        async = true
        async = ${?EVENTS_ASYNC}
        retry {
            enabled = true
            enabled = ${?EVENT_RETRY_ENABLED}
            maxAttempts = 3
            maxAttempts = ${?EVENT_RETRY_MAX_ATTEMPTS}
            delay = 1000  # 1 second
            delay = ${?EVENT_RETRY_DELAY}
        }
    }
}

# Test mode configuration
test {
    enabled = false
    enabled = ${?TEST_MODE}
    # When test mode is enabled, these settings override the main configuration
    auth {
        enabled = true
        secret = "test-secret"
        expiration = 3600
    }
    storage {
        type = "memory"
        cache {
            enabled = true
            ttl = 60000
        }
    }
    messaging {
        type = "memory"
    }
    monitoring {
        enabled = true
        metrics.enabled = true
        health.enabled = true
        tracing.enabled = false
    }
    service {
        validation {
            enabled = true
            strict = true
        }
        events {
            enabled = true
            async = false
        }
    }
}
