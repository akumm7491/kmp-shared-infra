apiVersion: apps/v1
kind: Deployment
metadata:
  name: weather-service
  namespace: default
  labels:
    app.kubernetes.io/name: weather-service
    app.kubernetes.io/part-of: kmp-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: weather-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: weather-service
        app.kubernetes.io/part-of: kmp-services
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/metrics"
        sidecar.istio.io/inject: "false"
    spec:
      containers:
        - name: weather-service
          image: weather-service:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          env:
            - name: PORT
              value: "80"
            - name: HOST
              value: "0.0.0.0"
            - name: APPLICATION_NAME
              value: "weather-service"
            - name: MONITORING_ENABLED
              value: "true"
            - name: REGISTRY_URL
              value: "http://service-registry:8761"
            - name: SCHEMA_REGISTRY_URL
              value: "http://schema-registry.kafka:8081"
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: "kafka-cluster-kafka-bootstrap.kafka:9092"
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 20
            periodSeconds: 10 