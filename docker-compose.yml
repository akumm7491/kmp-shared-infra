version: '3.8'

services:
  # Kafka Infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
      - '7071:7071'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OPTS: >-
        -javaagent:/etc/prometheus/jmx_prometheus_javaagent.jar=7071:/etc/prometheus/kafka.yml
    volumes:
      - ./infra/k8s/monitoring/prometheus/jmx_prometheus_javaagent.jar:/etc/prometheus/jmx_prometheus_javaagent.jar
      - ./infra/k8s/monitoring/prometheus/kafka.yml:/etc/prometheus/kafka.yml
    networks:
      - app-network
      - monitoring-network

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    depends_on:
      - kafka
    ports:
      - '8081:8081'
      - '7072:7072'
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_OPTS: >-
        -javaagent:/etc/prometheus/jmx_prometheus_javaagent.jar=7072:/etc/prometheus/schema-registry.yml
    volumes:
      - ./infra/k8s/monitoring/prometheus/jmx_prometheus_javaagent.jar:/etc/prometheus/jmx_prometheus_javaagent.jar
      - ./infra/k8s/monitoring/prometheus/schema-registry.yml:/etc/prometheus/schema-registry.yml
    networks:
      - app-network
      - monitoring-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
    depends_on:
      - kafka
      - schema-registry
    networks:
      - app-network

  # Service Infrastructure
  config-server:
    build:
      context: .
      dockerfile: microservices/config-server/Dockerfile
    ports:
      - '8888:8888'
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka/
    volumes:
      - ./microservices/config-server/config-repo:/config-repo
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8888/actuator/health']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
      - monitoring-network

  service-registry:
    build:
      context: .
      dockerfile: microservices/service-registry/Dockerfile
    ports:
      - '8761:8761'
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8761/actuator/health']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
      - monitoring-network

  # Monitoring Infrastructure
  prometheus:
    image: prom/prometheus:v2.48.1
    ports:
      - '9090:9090'
    volumes:
      - ./infra/k8s/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./examples/service-a/monitoring/service-a.yml:/etc/prometheus/targets/service-a.yml
      - ./examples/service-b/monitoring/service-b.yml:/etc/prometheus/targets/service-b.yml
      - ./examples/demo-service/monitoring/demo-service.yml:/etc/prometheus/targets/demo-service.yml
      - ./examples/template-service/monitoring/template-service.yml:/etc/prometheus/targets/template-service.yml
      - ./examples/weather-service/monitoring/weather-service.yml:/etc/prometheus/targets/weather-service.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - monitoring-network

  grafana:
    image: grafana/grafana:10.2.3
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./infra/k8s/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infra/k8s/monitoring/grafana/dashboards:/etc/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - monitoring-network

networks:
  core-network:
    name: kmp-core-network
  app-network:
    name: kmp-app-network
  monitoring-network:
    name: kmp-monitoring-network
