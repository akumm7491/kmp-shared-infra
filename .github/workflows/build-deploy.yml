name: Build and Deploy Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'infra/**'
      - 'examples/**'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
    paths:
      - 'infra/**'
      - 'examples/**'
      - '.github/workflows/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TF_VERSION: '1.5.0'
  ISTIO_VERSION: '1.24.2'
  KUBECTL_VERSION: '1.26.0'
  CLOUD_PROVIDER: ${{ inputs.cloud_provider || 'aws' }}
  ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format
        run: terraform fmt -check -recursive ./infra/terraform

      - name: Terraform Init
        run: |
          cd ./infra/terraform/${{ env.CLOUD_PROVIDER }}/${{ env.ENVIRONMENT }}
          terraform init

      - name: Terraform Validate
        run: |
          cd ./infra/terraform/${{ env.CLOUD_PROVIDER }}/${{ env.ENVIRONMENT }}
          terraform validate

      - name: Validate Kubernetes Manifests
        run: |
          curl -LO "https://dl.k8s.io/release/v${{ env.KUBECTL_VERSION }}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl apply --dry-run=client -k ./infra/k8s/environments/${{ env.ENVIRONMENT }}

  build:
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build

      - name: Run tests
        run: ./gradlew test

      - name: Build and push Docker images
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

          # Build and push each service
          for service in examples/*/; do
            if [ -f "$service/Dockerfile" ]; then
              service_name=$(basename $service)
              docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service_name:${{ github.sha }} $service
              docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service_name:${{ github.sha }}
            fi
          done

  deploy-infrastructure:
    needs: validate
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure Cloud Credentials
        uses: ./.github/actions/configure-cloud
        with:
          provider: ${{ env.CLOUD_PROVIDER }}
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init and Apply
        run: |
          cd ./infra/terraform/${{ env.CLOUD_PROVIDER }}/${{ env.ENVIRONMENT }}
          terraform init
          terraform apply -auto-approve

      - name: Update kubeconfig
        run: |
          case ${{ env.CLOUD_PROVIDER }} in
            aws)
              aws eks update-kubeconfig --name ${{ env.ENVIRONMENT }}-cluster
              ;;
            gcp)
              gcloud container clusters get-credentials ${{ env.ENVIRONMENT }}-cluster
              ;;
            azure)
              az aks get-credentials --name ${{ env.ENVIRONMENT }}-cluster
              ;;
          esac

      - name: Install Istio
        run: |
          curl -L https://istio.io/downloadIstio | ISTIO_VERSION=${{ env.ISTIO_VERSION }} sh -
          sudo mv istio-${{ env.ISTIO_VERSION }}/bin/istioctl /usr/local/bin/
          istioctl install -f ./infra/k8s/istio/base/mesh.yaml --skip-confirmation

      - name: Setup monitoring
        run: |
          kubectl apply -k ./infra/k8s/monitoring
          kubectl apply -k ./infra/k8s/istio/monitoring

  deploy-services:
    needs: [build, deploy-infrastructure]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.ENVIRONMENT }}-cluster

      - name: Deploy services
        run: |
          # Enable Istio injection
          kubectl label namespace default istio-injection=enabled --overwrite

          # Deploy each service
          for service in examples/*/; do
            if [ -f "$service/helm/Chart.yaml" ]; then
              service_name=$(basename $service)
              helm upgrade --install $service_name $service/helm \
                --namespace default \
                --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service_name \
                --set image.tag=${{ github.sha }} \
                --set environment=${{ env.ENVIRONMENT }}
            fi
          done

      - name: Apply Istio configurations
        run: |
          kubectl apply -k ./infra/k8s/istio/gateway
          kubectl apply -f ./infra/k8s/istio/monitoring/monitoring.yaml

      - name: Verify deployments
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment --all
          kubectl get virtualservice,gateway -A
          kubectl get pods -A

  post-deploy:
    needs: deploy-services
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.ENVIRONMENT }}-cluster

      - name: Health check
        run: |
          # Get Istio ingress gateway URL
          GATEWAY_URL=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

          # Check each service endpoint
          for service in examples/*/; do
            service_name=$(basename $service)
            curl -f -s -o /dev/null http://$GATEWAY_URL/$service_name/health || exit 1
          done

      - name: Verify monitoring
        run: |
          # Check Prometheus targets
          kubectl port-forward -n monitoring svc/prometheus-operated 9090:9090 &
          sleep 5
          curl -s http://localhost:9090/-/ready || exit 1

          # Check Grafana
          kubectl port-forward -n monitoring svc/grafana 3000:3000 &
          sleep 5
          curl -s http://localhost:3000/api/health || exit 1
